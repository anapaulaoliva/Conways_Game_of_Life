{"version":3,"sources":["styles/Modal.module.css","styles/Board.module.css","styles/Controls.module.css","styles/Footer.module.css","assets/clear-icon.png","assets/clean-modal-icon.png","assets/github-logo.JPG","components/Controls/Controls.jsx","components/Board.jsx","components/Modal.jsx","components/Game.jsx","components/Footer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Controls","handlers","simulate","random","clear","useState","simulateIsActive","setSimulateIsActive","className","ControlsStyle","onClick","icon","faPlay","size","style","color","faPause","faRandom","CleanIcon","src","ClearIcon","alt","Board","counter","generation","setGeneration","operations","generateEmptyGrid","Array","fill","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","i","j","neighbors","forEach","x","y","newI","newJ","setTimeout","rows","push","from","Math","gridTemplateColumns","map","col","BoardStyle","Cell","key","backgroundColor","undefined","newGrid","GenCounter","Gen","Modal","isModalOpen","setIsModalOpen","ModalStyle","InfoIcon","faInfoCircle","Overlay","Dialog","role","aria-label","fontSize","href","target","CrossIcon","Game","Footer","FooterStyle","ghLogo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e816f285.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Overlay\":\"Modal_Overlay__2NRjw\",\"Dialog\":\"Modal_Dialog__1xGId\",\"CrossIcon\":\"Modal_CrossIcon__3kJ-z\",\"InfoIcon\":\"Modal_InfoIcon__7C5w2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Board_Cell__3dExj\",\"Gen\":\"Board_Gen__2dEyf\",\"GenCounter\":\"Board_GenCounter__kY0m5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__3ORvE\",\"CleanIcon\":\"Controls_CleanIcon__icGw9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ghLogo\":\"Footer_ghLogo__-v_qF\"};","module.exports = __webpack_public_path__ + \"static/media/clear-icon.8d45ef69.png\";","module.exports = __webpack_public_path__ + \"static/media/clean-modal-icon.421ffc2c.png\";","module.exports = __webpack_public_path__ + \"static/media/github-logo.dd529c5f.JPG\";","import React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause, faRandom } from '@fortawesome/free-solid-svg-icons';\r\nimport ClearIcon from '../../assets/clear-icon.png'\r\nimport ControlsStyle from '../../styles/Controls.module.css';\r\n\r\nconst Controls = ({handlers}) => {\r\n    const { simulate, random, clear } = handlers;\r\n    const [simulateIsActive, setSimulateIsActive] = useState(true); \r\n\r\n    return(\r\n        <section className={ControlsStyle.Controls}>\r\n            <button onClick={ () => {\r\n                setSimulateIsActive(!simulateIsActive)\r\n                simulate();\r\n                }}>\r\n\r\n                {simulateIsActive ? \r\n                    <FontAwesomeIcon \r\n                        icon={faPlay}\r\n                        size=\"lg\" \r\n                        style={{color: \"whitesmoke\"}}\r\n                    /> \r\n                :   <FontAwesomeIcon\r\n                        icon={faPause}\r\n                        size=\"lg\"\r\n                        style={{color: \"whitesmoke\"}}\r\n                    />\r\n                }\r\n            </button>\r\n\r\n            <button onClick={random}>\r\n                <FontAwesomeIcon \r\n                    icon ={faRandom} \r\n                    size=\"lg\"\r\n                    style={{color: \"whitesmoke\"}}\r\n                />\r\n            </button>\r\n\r\n            <button onClick={clear}>\r\n                <img\r\n                    className={ControlsStyle.CleanIcon}\r\n                    src={ClearIcon}\r\n                    alt=\"clear-icon\"\r\n                />\r\n            </button>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Controls;","import React, { useState, useCallback, useRef } from 'react';\r\nimport produce from 'immer';\r\nimport Controls from './Controls/Controls';\r\nimport BoardStyle from '../styles/Board.module.css';\r\n\r\nconst Board = () => {\r\n    const numRows = 30;\r\n    const numCols = 30;\r\n\r\n    let counter = 0;\r\n    const [generation, setGeneration] = useState(counter);\r\n\r\n    /*conditionals for all the neighbor cell of the current cell that we are iterating through*/\r\n    const operations = [\r\n        //x,y values\r\n        [0, 1],\r\n        [0, -1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, 1],\r\n        [-1, -1],\r\n        [1, 0],\r\n        [-1, 0]\r\n    ];\r\n\r\n    const generateEmptyGrid = () => {\r\n        return Array(numRows).fill(Array(numCols).fill(0));\r\n    };\r\n    \r\n    const [grid, setGrid] = useState( ()=> {\r\n        return generateEmptyGrid();\r\n    });\r\n\r\n    const [running, setRunning] = useState(false);\r\n\r\n    const runningRef = useRef(running);\r\n    runningRef.current = running;\r\n\r\n    const runSimulation = useCallback(() => {\r\n        setGeneration(counter);\r\n        counter++;        \r\n        if (!runningRef.current) {\r\n            return;\r\n        }\r\n        //update state of g: current value of the grid\r\n        setGrid((g) => {\r\n            //gridCopy expected to conserve original grid\r\n            return produce(g, gridCopy => {\r\n                //for loops go through every single cell of the grid\r\n                for (let i = 0; i < numRows; i++) {\r\n                    for (let j = 0; j < numCols; j++) {\r\n                        //compute neighbors\r\n                        let neighbors = 0;\r\n                        //checking each condition given in the array\r\n                        operations.forEach(([x,y]) => {\r\n                            const newI = i + x;\r\n                            const newJ = j + y;\r\n                            //conditionals to delimitate checking above or below the grid values\r\n                            if (newI >= 0 && newI < numRows && newJ >= 0 && newJ < numCols) {\r\n                                    //counter of how many neighbors the cell has\r\n                                    neighbors += g[newI][newJ];\r\n                                }\r\n                        })\r\n                        //Conditional for the death of a cell\r\n                        if (neighbors < 2 || neighbors > 3) {\r\n                            //current position dies.\r\n                            gridCopy[i][j] = 0;\r\n                        //Conditional for the \"birth\" of a cell\r\n                        } else if (g[i][j] === 0 && neighbors === 3) {\r\n                            //current position lives.\r\n                            gridCopy[i][j] = 1;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //calling the function itself each 300ms        \r\n        setTimeout(runSimulation, 200);\r\n    }, []);\r\n\r\n    const simulateButton = () => {\r\n        setRunning(!running);\r\n        /*checking playbtn state given the actual state -ref- of the button*/\r\n        switch(!running) {\r\n            case (!running): runningRef.current = true; runSimulation(); break;\r\n        }\r\n    };\r\n\r\n    const randomizeButton = () => {\r\n        const rows = [];\r\n            for (let i = 0; i < numRows; i++) {\r\n                rows.push(Array.from(Array(numCols), () => \r\n                    Math.random() > 0.8 ? 1 : 0))\r\n            }\r\n            setGrid(rows);\r\n            setGeneration(counter = 0);\r\n    };\r\n\r\n    const clearButton = () => {\r\n        setGrid(generateEmptyGrid());\r\n        setGeneration(counter = 0);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Controls\r\n                handlers={{\r\n                    simulate: simulateButton,\r\n                    random: randomizeButton,\r\n                    clear: clearButton\r\n                }}\r\n            />\r\n\r\n            <main style={{ gridTemplateColumns: `repeat(${numCols}, 15px)`}}>\r\n                {grid.map((rows, i) =>\r\n                    rows.map((col, j) => (\r\n                        //rendering each cell square\r\n                        <div\r\n                            className={BoardStyle.Cell}\r\n                            key={`${i}-${j}`} \r\n                            style={{ backgroundColor: grid[i][j] ? 'lavenderblush' : undefined }} \r\n                            onClick={() => {\r\n                                const newGrid = produce(grid, gridCopy => {\r\n                                    gridCopy[i][j] = 1;\r\n                                })\r\n                                setGrid(newGrid);\r\n                            }}\r\n                        />\r\n                    ))\r\n                )}\r\n            </main>\r\n            \r\n            <div className={BoardStyle.GenCounter}>\r\n                <span>g e n</span>\r\n                <div className={BoardStyle.Gen}>\r\n                    <p> { generation } </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Board;","import React, { useState } from 'react';\r\nimport CleanIcon from '../assets/clean-modal-icon.png';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faInfoCircle, faPlay, faRandom } from '@fortawesome/free-solid-svg-icons';\r\nimport ModalStyle from '../styles/Modal.module.css';\r\n\r\nconst Modal = () => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n\r\n    return(\r\n\r\n        <section>\r\n            <button onClick={() => {\r\n                setIsModalOpen(true)\r\n            }}>\r\n                <FontAwesomeIcon \r\n                    className={ModalStyle.InfoIcon}\r\n                    icon={ faInfoCircle } \r\n                    size=\"lg\"\r\n                    style={{color: \"lavenderblush\"}}\r\n                />\r\n            </button>\r\n\r\n            {isModalOpen && (\r\n                <div className={ModalStyle.Overlay}>\r\n                    <div className={ModalStyle.Dialog}>\r\n                        <h1>\r\n                            <span role=\"img\" aria-label=\"tada\">🎉</span>\r\n                            Conway's Game of Life\r\n                            <span role=\"img\" aria-label=\"tada\">🎉</span>\r\n                        </h1>\r\n                        <h3>To:</h3> <br/>\r\n                            <p style={{fontSize:\"1em\"}}>\r\n                                Pause/Resume press the <FontAwesomeIcon icon={faPlay}/> button. <br/>\r\n                                Create random life press the <FontAwesomeIcon icon={faRandom}/> button. <br/>\r\n                                Clear the board press the <img src={CleanIcon} alt=\"clean-icon\"/> button. <br/>\r\n                            </p>\r\n                        <h4>For the rules and for more fun shapes:</h4>\r\n                                <a \r\n                                    href=\"https://bit.ly/36VVFGn\" \r\n                                    target=\"_blank\"\r\n                                    style={{color: \"rgb(105, 59, 212)\"}}>\r\n                                        Wikipedia article about the game\r\n                                </a>\r\n                                <br/>\r\n                                <a \r\n                                    href=\"https://bit.ly/2zY5cjT\" \r\n                                    target=\"_blank\"\r\n                                    style={{color: \"rgb(105, 59, 212)\"}}>\r\n                                        LifeWiki\r\n                                </a>\r\n                                <br/>\r\n                        <button \r\n                            onClick={() => \r\n                            setIsModalOpen(false)\r\n                            }>\r\n                            <span className={ModalStyle.CrossIcon}>&times;</span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </section>\r\n\r\n    );\r\n}\r\n\r\nexport default Modal;\r\n","import React from 'react';\r\nimport Board from './Board';\r\nimport Modal from './Modal';\r\nimport '../App.css';\r\n\r\nconst Game = () => {\r\n    return (\r\n        <>\r\n        <div className=\"App\">\r\n            <Board/>\r\n            <Modal/>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\nimport ghLogo from '../assets/github-logo.JPG';\r\nimport FooterStyle from '../styles/Footer.module.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        \r\n        <footer className={FooterStyle.Footer}>\r\n                <img\r\n                    src={ghLogo}\r\n                    className={FooterStyle.ghLogo}\r\n                    alt=\"github-logo\"\r\n                />\r\n                <a\r\n                    href=\"https://github.com/anapaulaoliva/Conways_Game_of_Life\"\r\n                    target=\"_blank\"\r\n                    alt=\"source-code\"\r\n                > \r\n                source code\r\n                </a>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Game from './components/Game';\r\nimport Footer from './components/Footer';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <header>Game of Life</header>\r\n        <Game/>\r\n        <Footer/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}