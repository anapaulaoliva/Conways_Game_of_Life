{"version":3,"sources":["styles/Controls.module.css","styles/Footer.module.css","assets/clear-icon.png","styles/Board.module.css","assets/github-logo.JPG","components/BoardComponent.jsx","components/GameComponent.jsx","components/FooterComponent.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Board","counter","useState","generation","setGeneration","operations","generateEmptyGrid","rows","i","push","Array","from","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","console","log","g","produce","gridCopy","j","neighbors","forEach","x","y","newI","newJ","setTimeout","className","ControlsStyle","Controls","onClick","icon","faPause","size","style","color","faPlay","Math","random","faRandom","CleanIcon","src","ClearIcon","alt","gridTemplateColumns","map","col","BoardStyle","Cell","key","newGrid","backgroundColor","undefined","Gen","faInfoCircle","Game","Footer","FooterStyle","ghLogo","href","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6412cc6b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Controls\":\"Controls_Controls__3ORvE\",\"CleanIcon\":\"Controls_CleanIcon__icGw9\",\"Gen\":\"Controls_Gen__27Ma1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ghLogo\":\"Footer_ghLogo__-v_qF\"};","module.exports = __webpack_public_path__ + \"static/media/clear-icon.8d45ef69.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Cell\":\"Board_Cell__3dExj\"};","module.exports = __webpack_public_path__ + \"static/media/github-logo.dd529c5f.JPG\";","import React, { useState, useCallback, useRef } from 'react';\r\nimport produce from 'immer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlay, faPause, faRandom, faInfoCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport ClearIcon from '../assets/clear-icon.png';\r\nimport BoardStyle from '../styles/Board.module.css';\r\nimport ControlsStyle from '../styles/Controls.module.css';\r\n\r\n\r\nconst Board = () => {\r\n    const numRows = 30;\r\n    const numCols = 30;\r\n\r\n    let counter = 0;\r\n    const [generation, setGeneration] = useState(counter);\r\n\r\n    /*conditionals for all the neighbor cells\r\n    of the current cell that we are iterating through\r\n    are stored represented as a 2d array*/\r\n    const operations = [\r\n        //x,y values\r\n        [0, 1],\r\n        [0, -1],\r\n        [1, -1],\r\n        [-1, 1],\r\n        [1, 1],\r\n        [-1, -1],\r\n        [1, 0],\r\n        [-1, 0]\r\n    ]\r\n\r\n    const generateEmptyGrid = () => {\r\n\r\n        const rows = [];\r\n        for (let i = 0; i < numRows; i++) {\r\n            rows.push(Array.from(Array(numCols), () => 0))\r\n        }\r\n\r\n        return rows;\r\n    };\r\n    \r\n    const [grid, setGrid] = useState(() => {\r\n        return generateEmptyGrid();\r\n    });\r\n\r\n    const [running, setRunning] = useState(false);\r\n\r\n    const runningRef = useRef(running);\r\n    runningRef.current = running;\r\n\r\n    const runSimulation = useCallback(() => {\r\n        setGeneration(counter)\r\n        counter++;\r\n        console.log(`corresimulacion time: ${counter}`)\r\n        if (!runningRef.current) {\r\n            return;\r\n        }\r\n        /*update states in \r\n        g: current value of the grid\r\n        gridCopy expected to mutate*/\r\n        setGrid((g) => {\r\n            return produce(g, gridCopy => {\r\n\r\n                //for loops go through every single cell of the grid\r\n                for (let i = 0; i < numRows; i++) {\r\n                    for (let j = 0; j < numCols; j++) {\r\n                        //compute neighbors\r\n                        let neighbors = 0;\r\n                        //checking each condition given in the array\r\n                        operations.forEach(([x,y]) => {\r\n                            const newI = i + x;\r\n                            const newJ = j + y;\r\n                            //conditionals to delimitate checking above or below the grid values\r\n                            if (newI >= 0 &&\r\n                                newI < numRows &&\r\n                                newJ >= 0 &&\r\n                                newJ < numCols) {\r\n                                    //counter of how many neighbors the cell has\r\n                                    neighbors += g[newI][newJ]\r\n                                }\r\n\r\n                        })\r\n                        //Conditional for the death of a cell\r\n                        if (neighbors < 2 || neighbors > 3) {\r\n                            //current position dies.\r\n                            gridCopy[i][j] = 0;\r\n                        //Conditional for the \"birth\" of a cell\r\n                        } else if (g[i][j] === 0 && neighbors === 3) {\r\n                            //current position lives.\r\n                            gridCopy[i][j] = 1;\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        //setGeneration(generation+3);\r\n        //calling the function itself each 300ms        \r\n        setTimeout(runSimulation, 200);\r\n    }, []);\r\n\r\n    return (\r\n        <>  \r\n            <section className={ControlsStyle.Controls}>\r\n                <button onClick={()=>{\r\n                    setRunning(!running);\r\n                    /*checking through button's state to switch between true or false\r\n                    given the actual state -ref- of the button*/\r\n                    if(!running){\r\n                        runningRef.current = true;\r\n                        runSimulation();\r\n                    }\r\n                    }}\r\n                >\r\n                {running ? <FontAwesomeIcon \r\n                            icon = {faPause} \r\n                            size=\"lg\" \r\n                            style={{color: \"whitesmoke\"}}\r\n                            /> \r\n                        : <FontAwesomeIcon \r\n                            icon ={faPlay} \r\n                            size=\"lg\" \r\n                            style={{color: \"whitesmoke\"}}\r\n                            />\r\n                }\r\n                </button>\r\n                <button onClick={()=>{\r\n                    const rows = [];\r\n                    for (let i = 0; i < numRows; i++) {\r\n                        rows.push(Array.from(Array(numCols), () => \r\n                            Math.random() > 0.8 ? 1 : 0))\r\n                    }\r\n                    setGrid(rows);\r\n                    setGeneration(counter = 0);\r\n                }}>\r\n                    <FontAwesomeIcon \r\n                        icon ={faRandom} \r\n                        size=\"lg\"\r\n                        style={{color: \"whitesmoke\"}}\r\n                        />\r\n                </button>\r\n                <button onClick={()=>{\r\n                    setGrid(generateEmptyGrid());\r\n                    setGeneration(counter = 0);\r\n                }}>\r\n                    <img\r\n                        className={ControlsStyle.CleanIcon}\r\n                        src={ClearIcon}\r\n                        alt=\"clear-icon\"\r\n                    />\r\n                </button>\r\n            </section>\r\n\r\n            <main style={{\r\n                gridTemplateColumns: `repeat(${numCols}, 15px)`\r\n            }}>\r\n                {grid.map((rows, i) =>\r\n                    rows.map((col, j) => (\r\n                        <div\r\n                        className={BoardStyle.Cell}\r\n                        key={`${i}-${j}`} \r\n                        onClick={() => {\r\n                            const newGrid = produce(grid, gridCopy => {\r\n                                gridCopy[i][j] = 1;\r\n                            });\r\n                            setGrid(newGrid);\r\n                        }}\r\n                        style={{\r\n                            backgroundColor: grid[i][j] ? 'lavenderblush' : undefined\r\n                        }} \r\n                        />\r\n                    ))\r\n                )}\r\n            </main>\r\n\r\n            <section>\r\n                <span>g e n</span>\r\n                <div className={ControlsStyle.Gen}>\r\n                    <p> { generation } </p>\r\n                </div>\r\n            </section>\r\n\r\n            <button onClick={() => {\r\n                //modal with information\r\n            }}\r\n            >\r\n                <FontAwesomeIcon \r\n                    icon={ faInfoCircle } \r\n                    size=\"lg\"\r\n                    style={{color: \"lavenderblush\"}}\r\n                />\r\n            </button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Board;","import React from 'react';\r\nimport Board from './BoardComponent';\r\nimport '../App.css';\r\n\r\nconst Game = () => {\r\n    return (\r\n        <>\r\n        <div className=\"App\">\r\n            <Board/>\r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Game;","import React from 'react';\r\nimport ghLogo from '../assets/github-logo.JPG';\r\nimport FooterStyle from '../styles/Footer.module.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        \r\n        <footer className={FooterStyle.Footer}>\r\n                <img\r\n                    src={ghLogo}\r\n                    className={FooterStyle.ghLogo}\r\n                    alt=\"github-logo\"\r\n                />\r\n                <a\r\n                    href=\"https://github.com/anapaulaoliva/Conways_Game_of_Life\"\r\n                    target=\"_blank\"\r\n                    alt=\"source-code\"\r\n                > \r\n                source code\r\n                </a>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\nimport Game from './components/GameComponent';\r\nimport Footer from './components/FooterComponent';\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <header>Game of Life</header>\r\n        <Game/>\r\n        <Footer/>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}